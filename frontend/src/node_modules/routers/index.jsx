import React from 'react';
import { BrowserRouter as Router, Route, Switch, Redirect, withRouter } from 'react-router-dom';
import { connect } from 'react-redux';
import { compose } from 'redux';

//Routes
import { PrivateRoute } from './PrivateRoute';
import { PublicRoute } from './PublicRoute';

//HOC
import checkRegister from './checkRegister'

//Components
import {
    MainPage,
    Login,
    Register,
    NoMatch,
    MessageList,
    ChatList
} from 'components';

import { isSuccess, isFailure } from 'actions';

import { LOGIN } from '../constants';

class Routes extends React.Component {

   
    componentWillReceiveProps(){
        console.log(arguments)
        return true;
    }

    render() {
        return(
            <Router>
                <Switch>
                    {/* LoggedIn Routes */}
                    <PrivateRoute exact path="/" component={MainPage}/>
                    <PrivateRoute path='/messages/:id' component={MessageList}/>
                    <PrivateRoute path='/messages' component={ChatList}/>
                    
                    {/* LoggedOut Routes */}
                    <PublicRoute path="/login" component={Login} />
                    <PublicRoute path="/register" component={Register} />

                    {/* Other Routes */}
                    <Route
                        path="/logout"
                        render={() => {
                            localStorage.removeItem('token');
                            return <Redirect to="login"/>;
                        }}
                    />
                    <Route exact path="*" render={() => <NoMatch isLoggedIn={this.props.LoggedIn}/>} />
                </Switch>
            </Router>
       )
    }
        
}

const mapStateToProps = state => (
    {
        isLoggedIn: state.login.isLoggedIn
    }
);

const mapDispatchToProps = dispatch => (
    {
        setLoggedIn: state => state ? dispatch(isSuccess(LOGIN)) : dispatch(isFailure(LOGIN)),
    }
);

export default compose(
    connect(mapStateToProps, mapDispatchToProps),
    checkRegister
)(Routes);
