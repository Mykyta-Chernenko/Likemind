import React from 'react';
import {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';
import {connect} from 'react-redux';
import {PrivateRoute} from './PrivateRoute';
import {Login, Register, Menu, NoMatch, ChatTest, ChatWrapper, Chat} from '../components';
import {isSuccess, isFailure} from '../actions';
import {LOGIN} from 'constants/user';
import localStorageApi from '../services/localStorageApi';
import {API_URL} from "constants/server";
import {TEXT_MESSAGE} from "constants/websocket-actions-types";
import {changeChatLastMessage} from "actions";

/*eslint-disable */
class Routes extends React.Component {
    constructor(props) {
        super(props)
        this.state = {
            ready: false
        }
    }

    componentWillMount() {
        let fucked_you_async = false;
        const auth_credits = [
            {'username': 'denis4', 'password': 'q'},
            {'username': 'nikita3', 'password': 'q'},
            {'username': 'artem5', 'password': 'q'}];
        const auth = auth_credits[Math.floor(Math.random() * 3)];
        axios.post(`${API_URL}/obtain-auth-token/`,
            {
                'username': auth['username'],
                'password': auth['password']
            })
            .then(response => {
                localStorage.setItem('token', response.data['token']);
                return response.data['token']
            })
            .then((token) => {
                const config = {
                    headers: {'Authorization': 'JWT ' + token}
                };
                axios.get(`${API_URL}/self-users/?fields=id`, config)
                    .then(response => {
                        localStorage.setItem('user_id', response.data['id']);
                        this.setState({'ready': true})

                    });
                const user_socket = new WebSocket('ws://0.0.0.0:8000/user/?token=' + token);
                user_socket.onopen = () => {
                    console.log("User chat_socket open");
                };
                user_socket.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    if (data.type === TEXT_MESSAGE) {
                        console.log(data.action);
                        console.log('dispatch comp')
                        this.props.changeChatLastMessage(data.action)
                    }

                };
                user_socket.onclose = () => {
                    console.log('User chat_socket disconnected')
                };
                user_socket.onerror = (e) => {
                    console.log(e)
                };
            });
    }

    componentDidMount() {
        this.props.setLoggedIn(localStorageApi.getItem());
    }

    render() {
        const ready = this.state.ready;
        let res = null;
        if (ready) {
            res = <Router>
                <Switch>
                    <Route exact path="/login" component={Login}/>
                    <Route exact path="/register" component={Register}/>
                    <Route path='/chat' component={Chat}/>
                    <Route path='/chat-wrapper' component={ChatWrapper}/>
                    <Menu>
                        <PrivateRoute exact path="/" render={() => <h1> You are logedIn! </h1>}/>
                        <PrivateRoute
                            path="/logout"
                            render={() => {
                                localStorage.removeItem('token');
                                return <Redirect to="login"/>;
                            }}
                        />
                    </Menu>
                    <Route render={() => <NoMatch isloggedIn={this.isLoggedIn}/>}/>
                </Switch>
            </Router>
        }
        return res
    }
}

const
    mapStateToProps = state => (
        {
            isLoggedIn: state.isLoggedIn
        }
    );

const
    mapDispatchToProps = dispatch => (
        {
            setLoggedIn: state => state ? dispatch(isSuccess(LOGIN)) : dispatch(isFailure(LOGIN)),
            changeChatLastMessage: (last_message) => (dispatch(changeChatLastMessage(last_message))),
        }
    );

export default connect(mapStateToProps, mapDispatchToProps)(Routes);
