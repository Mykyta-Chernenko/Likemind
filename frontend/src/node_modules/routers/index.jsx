import React from 'react';
import {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';
import {connect} from 'react-redux';
import {PrivateRoute} from './PrivateRoute';
import {Login, Register, Menu, NoMatch, ChatTest, ChatWrapper, Chat} from '../components';
import {LOGIN, isSuccess, isFailure} from '../actions';
import localStorageApi from '../services/localStorageApi';

/*eslint-disable */
class Routes extends React.Component {
    componentDidMount() {
        this.props.setLoggedIn(localStorageApi.getItem());
        const auth_credits = [
            {'username': 'denis', 'password': 'q'},
            {'username': 'nikita', 'password': 'q'},
            {'username': 'artem', 'password': 'q'}];
        const auth = auth_credits[Math.round(Math.random() * 2)];
        axios.post('http://localhost:8000/api/obtain-auth-token/',
            {
                'username': auth['username'],
                'password': auth['password']
            })
            .then(response => {
                localStorage.setItem('token', response.data['token']);
                return response.data['token']
            })
            .then((token) => {
                const config = {
                    headers: {'Authorization': 'JWT ' + token}
                };
                axios.get('http://localhost:8000/api/self-users/?fields=id', config)
                    .then(response => {
                        localStorage.setItem('user_id', response.data['id'])
                    });
                const user_socket = new WebSocket('ws://0.0.0.0:8000/user/?token=' + token);
                user_socket.onopen = () => {
                    console.log("User chat_socket open");
                };
                user_socket.onmessage = (event) => {
                    console.log('user event');
                    const data = JSON.parse(event.data);
                    if (data.type === TEXT_MESSAGE) {
                        const action = data.action;
                        const chats = this.state.chats;
                        for (let i = 0; i < chats.length; i++) {
                            if (chats[i].id === action.chat) {
                                chats[i].last_message = action
                            }
                        }
                        this.setState({'chats': chats})
                    }

                };
                user_socket.onclose = () => {
                    console.log('User chat_socket disconnected')
                };
                user_socket.onerror = (e) => {
                    console.log(e)
                };
            });
    }

    render() {
        return (
            <Router>
                <Switch>
                    <Route exact path="/login" component={Login}/>
                    <Route exact path="/register" component={Register}/>
                    <Route path='/chat' component={Chat}/>
                    <Route path='/chat-wrapper' component={ChatWrapper}/>
                    <Menu>
                        <PrivateRoute exact path="/" render={() => <h1> You are logedIn! </h1>}/>
                        <PrivateRoute
                            path="/logout"
                            render={() => {
                                localStorage.removeItem('token');
                                return <Redirect to="login"/>;
                            }}
                        />
                    </Menu>
                    <Route render={() => <NoMatch isloggedIn={this.isLoggedIn}/>}/>
                </Switch>
            </Router>
        );
    }
}

const
    mapStateToProps = state => (
        {
            isLoggedIn: state.isLoggedIn
        }
    )

const
    mapDispatchToProps = dispatch => (
        {
            setLoggedIn: state => state ? dispatch(isSuccess(LOGIN)) : dispatch(isFailure(LOGIN))
        }
    )

export default connect(mapStateToProps, mapDispatchToProps)

(
    Routes
)
;
