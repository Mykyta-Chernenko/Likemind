import React from 'react';
import { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';
import { connect } from 'react-redux';
import { compose } from 'redux';

//Routes
import { PrivateRoute } from './PrivateRoute';
import { PublicRoute } from './PublicRoute';

//HOCs
import { subscribeNotifies, subscribeMessages, loadUserInfo } from 'components/HOCs';

//Components
import {
    MainPage,
    Login,
    Register,
    NoMatch,
    MessageList,
    ChatList
} from 'components';

import localStorageApi from 'services/localStorageApi';

import { isSuccess, isFailure, GetUserID, ReceiveMessage } from 'actions';

import { LOGIN } from '../constants';

class Routes extends React.Component {
    componentDidMount(token = localStorageApi.getItem()) {
        this.props.setLoggedIn({token});
        this.props.subscribeNotifies(token);
        this.props.loadUserInfo(token);
    }

    render() {
        if (!this.props.token && localStorageApi.getItem()) return null;
        const {
            subscribeMessages,
            sendMessage,
            subscribeNotifies,
            loadUserInfo,
            isLoggedIn,
            token,
            userId
        } = this.props;
        return(
            <Router>
                <Switch>
                    {/* LoggedIn Routes */}
                    <PrivateRoute exact path="/" component={MainPage}/>
                    <PrivateRoute 
                        path='/messages/:id' 
                        routeProps={
                            {
                                subscribeMessages,
                                sendMessage,
                                token,
                                userId
                            }
                        }
                        component={MessageList}
                    />
                    <PrivateRoute 
                        path='/messages'
                        routeProps={
                            {
                                userId
                            }
                        }
                        component={ChatList}
                    />
                    
                    {/* LoggedOut Routes */}
                    <PublicRoute 
                        exact path="/login"
                        routeProps={
                            {
                                subscribeNotifies,
                                loadUserInfo
                            }
                        } 
                        component={Login}
                    />
                    <PublicRoute path="/register" component={Register} />

                    {/* Other Routes */}
                    <Route
                        path="/logout"
                        render={() => {
                            localStorageApi.clear();
                            return <Redirect to="login"/>;
                        }}
                    />
                    <Route exact path="*" render={() => <NoMatch isLoggedIn={isLoggedIn}/>} />
                </Switch>
            </Router>
       )
    }
}

// userId & token could be retrieved from store only from this component!
const mapStateToProps = state => (
    {
        isLoggedIn: state.login.isLoggedIn,
        token: state.login.token,
        userId: state.login.id
    }
);

const mapDispatchToProps = dispatch => (
    {
        setLoggedIn: payload => payload ? dispatch(isSuccess(LOGIN, payload)) : dispatch(isFailure(LOGIN)),
        GetUserID: payload => dispatch(GetUserID(payload)),
        ReceiveMessage: payload => dispatch(ReceiveMessage(payload))
    }
);

export default compose(
    connect(mapStateToProps, mapDispatchToProps),
    loadUserInfo,
    subscribeMessages,
    subscribeNotifies
)(Routes);
