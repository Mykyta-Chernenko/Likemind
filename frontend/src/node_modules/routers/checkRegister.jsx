import React from 'react';
import axios from 'axios';

import localStorageApi from 'services/localStorageApi';

import { API_URL } from "constants/server";
import { TEXT_MESSAGE } from "constants/websocket-actions-types";

const checkRegistr = (Component) => {
    class AsyncComponent extends React.Component {
        constructor(props) {
            super(props)
            this.state = {
                ready: false
            }
        }

        componentWilMount() {
            let fucked_you_async = false;
            const auth_credits = [
                {'username': 'denis4', 'password': 'q'},
                {'username': 'nikita3', 'password': 'q'},
                {'username': 'artem5', 'password': 'q'}];
            const auth = auth_credits[Math.floor(Math.random() * 3)];
            axios.post(`${API_URL}/obtain-jwt-token/`,
                {
                    'username': auth['username'],
                    'password': auth['password']
                })
                .then(response => {
                    localStorage.setItem('token', response.data['token']);
                    return response.data['token']
                })
                .then((token) => {
                    const config = {
                        headers: {'Authorization': 'JWT ' + token}
                    };
                    axios.get(`${API_URL}/self-users/?fields=id`, config)
                        .then(response => {
                            localStorage.setItem('user_id', response.data['id']);
                            this.setState({'ready': true})
    
                        });
                    const user_socket = new WebSocket('ws://0.0.0.0:8000/user/?token=' + token);
                    user_socket.onopen = () => {
                        console.log("User chat_socket open");
                    };
                    user_socket.onmessage = (event) => {
                        const data = JSON.parse(event.data);
                        if (data.type === TEXT_MESSAGE) {
                            console.log(data.action);
                            console.log('dispatch comp')
                            this.props.changeChatLastMessage(data.action)
                        }
                    };
                    user_socket.onclose = () => {
                        console.log('User chat_socket disconnected')
                    };
                    user_socket.onerror = (e) => {
                        console.log(e)
                    };
                });
        }
    
        componentDidMount() {
            this.props.setLoggedIn(localStorageApi.getItem());
        }

        render() {
            console.log(this.props);
            return (
                <Component LoggedIn={this.props.isLoggedIn}/>
            )
        }
    }
    return AsyncComponent;
};

export default checkRegistr;