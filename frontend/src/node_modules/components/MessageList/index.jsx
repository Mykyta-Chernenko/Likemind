import React, { Fragment } from 'react';
import { compose } from 'redux';
import { connect } from 'react-redux';

//Components
import MessageList from './MessageList';

//HOCS
import { hideIfNoData } from 'components/HOCs';

//Tools
import API from 'services'
import { GetMessageList, ClearMessageList } from 'actions';
import { lifecycle, withHandlers, branch, toClass } from 'recompose';

function MessagesPage(props) {
    const { 
        messages,
        sendMessage,
        renderMessageList
    } = props;
    return (
        <Fragment>
            <MessageList
                messageList={messages.list}
                renderMessageList={renderMessageList}
                sendMessage={sendMessage}
            />
        </Fragment>
    );
}

const enhance = hideIfNoData(
    props => !(props.messages.fetched)
)

const lifecycles = lifecycle({
    componentWillMount() {
        API.Get(`private-messages/list/${this.props.match.params.id}`)
            .then(
                res => {
                    this.props.GetMessageList(res.data.results);
                },
                err => {
                    console.log(err);
                }
            )
    },
    componentDidMount() {
        this.props.subscribeMessages(
            this.props.token,
            this.props.match.params.id
        );
    }
});

const handlers = withHandlers({
    renderMessageList: props => list => {
        return list.map((item, index) => {
            let position = item.owner === props.userId ? 'right': 'left';
            return {
                position,
                type: 'text',
                text: item.text,
                date: new Date()
            }
        })
    }
});

const MapStateToProps = (state) => ({
    messages: state.messages
})

export default compose(
    connect( MapStateToProps, { GetMessageList }),
    lifecycles,
    handlers,
    toClass,
    enhance
)(MessagesPage)