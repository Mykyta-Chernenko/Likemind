import React from 'react';
import { compose } from 'redux';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { lifecycle, withHandlers, toClass } from 'recompose';
//Components
import ChatList from './ChatList';

//HOCS
import { hideIfNoData } from 'components/HOCs';

//Tools
import { GetChatList, ClearMessageList } from 'actions';
import API from 'services';

function ChatsPage (props) {
    const { chats } = props;
    return (
        <ChatList 
            chatList={chats.list}
            renderChatList={props.renderChatList}
            moveToDirectChat={props.moveToDirectChat}
        />
    );
}

const enhance = hideIfNoData(
    props => !(props.chats.fetched)
)

const loadChat = lifecycle({
    componentWillMount() {
        API.Get('private-chats/')
            .then(
                res => {
                    this.props.GetChatList(res.data);
                },
                err => {
                    console.log(err);
                }
            )
    },
    componentDidMount() {
        this.props.ClearMessageList();
    }
});

const handlers = withHandlers({
    renderChatList: props => list => {
        return list.map((item, index) => {
            let checkLastMessage = item.last_message;
            let anotherUser = item.first_user.id === props.userId ? item.second_user : item.first_user; 
            return {
                id: item.id,
                avatar: 'https://image.flaticon.com/icons/svg/701/701993.svg',
                title: anotherUser.username,
                subtitle: checkLastMessage ? item.last_message.text : 'Empty chat',
                dateString: checkLastMessage ? item.last_message.created_at : ''
            }
        })
    },
    moveToDirectChat: props => item => {
        props.history.push(`/messages/${item.id}`)
    }
});

const MapStateToProps = (state) => ({
    chats: state.chats
});

export default compose(
    connect( MapStateToProps, { GetChatList, ClearMessageList }),
    loadChat,
    handlers,
    toClass,
    withRouter
)(ChatsPage)